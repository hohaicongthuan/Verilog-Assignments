// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/25/2020 11:07:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TrafficLightController
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TrafficLightController_vlg_sample_tst(
	LongTime_i,
	ShortTime_i,
	clk,
	sampler_tx
);
input [5:0] LongTime_i;
input [5:0] ShortTime_i;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(LongTime_i or ShortTime_i or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TrafficLightController_vlg_check_tst (
	FG,
	FR,
	FY,
	HG,
	HR,
	HY,
	sampler_rx
);
input  FG;
input  FR;
input  FY;
input  HG;
input  HR;
input  HY;
input sampler_rx;

reg  FG_expected;
reg  FR_expected;
reg  FY_expected;
reg  HG_expected;
reg  HR_expected;
reg  HY_expected;

reg  FG_prev;
reg  FR_prev;
reg  FY_prev;
reg  HG_prev;
reg  HR_prev;
reg  HY_prev;

reg  FG_expected_prev;
reg  FR_expected_prev;
reg  FY_expected_prev;
reg  HG_expected_prev;
reg  HR_expected_prev;
reg  HY_expected_prev;

reg  last_FG_exp;
reg  last_FR_exp;
reg  last_FY_exp;
reg  last_HG_exp;
reg  last_HR_exp;
reg  last_HY_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	FG_prev = FG;
	FR_prev = FR;
	FY_prev = FY;
	HG_prev = HG;
	HR_prev = HR;
	HY_prev = HY;
end

// update expected /o prevs

always @(trigger)
begin
	FG_expected_prev = FG_expected;
	FR_expected_prev = FR_expected;
	FY_expected_prev = FY_expected;
	HG_expected_prev = HG_expected;
	HR_expected_prev = HR_expected;
	HY_expected_prev = HY_expected;
end



// expected FG
initial
begin
	FG_expected = 1'bX;
end 

// expected FR
initial
begin
	FR_expected = 1'bX;
end 

// expected FY
initial
begin
	FY_expected = 1'bX;
end 

// expected HG
initial
begin
	HG_expected = 1'bX;
end 

// expected HR
initial
begin
	HR_expected = 1'bX;
end 

// expected HY
initial
begin
	HY_expected = 1'bX;
end 
// generate trigger
always @(FG_expected or FG or FR_expected or FR or FY_expected or FY or HG_expected or HG or HR_expected or HR or HY_expected or HY)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected FG = %b | expected FR = %b | expected FY = %b | expected HG = %b | expected HR = %b | expected HY = %b | ",FG_expected_prev,FR_expected_prev,FY_expected_prev,HG_expected_prev,HR_expected_prev,HY_expected_prev);
	$display("| real FG = %b | real FR = %b | real FY = %b | real HG = %b | real HR = %b | real HY = %b | ",FG_prev,FR_prev,FY_prev,HG_prev,HR_prev,HY_prev);
`endif
	if (
		( FG_expected_prev !== 1'bx ) && ( FG_prev !== FG_expected_prev )
		&& ((FG_expected_prev !== last_FG_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FG_expected_prev);
		$display ("     Real value = %b", FG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FG_exp = FG_expected_prev;
	end
	if (
		( FR_expected_prev !== 1'bx ) && ( FR_prev !== FR_expected_prev )
		&& ((FR_expected_prev !== last_FR_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FR_expected_prev);
		$display ("     Real value = %b", FR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FR_exp = FR_expected_prev;
	end
	if (
		( FY_expected_prev !== 1'bx ) && ( FY_prev !== FY_expected_prev )
		&& ((FY_expected_prev !== last_FY_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FY_expected_prev);
		$display ("     Real value = %b", FY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FY_exp = FY_expected_prev;
	end
	if (
		( HG_expected_prev !== 1'bx ) && ( HG_prev !== HG_expected_prev )
		&& ((HG_expected_prev !== last_HG_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HG_expected_prev);
		$display ("     Real value = %b", HG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_HG_exp = HG_expected_prev;
	end
	if (
		( HR_expected_prev !== 1'bx ) && ( HR_prev !== HR_expected_prev )
		&& ((HR_expected_prev !== last_HR_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HR_expected_prev);
		$display ("     Real value = %b", HR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_HR_exp = HR_expected_prev;
	end
	if (
		( HY_expected_prev !== 1'bx ) && ( HY_prev !== HY_expected_prev )
		&& ((HY_expected_prev !== last_HY_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port HY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", HY_expected_prev);
		$display ("     Real value = %b", HY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_HY_exp = HY_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TrafficLightController_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] LongTime_i;
reg [5:0] ShortTime_i;
reg clk;
// wires                                               
wire FG;
wire FR;
wire FY;
wire HG;
wire HR;
wire HY;

wire sampler;                             

// assign statements (if any)                          
TrafficLightController i1 (
// port map - connection between master ports and signals/registers   
	.FG(FG),
	.FR(FR),
	.FY(FY),
	.HG(HG),
	.HR(HR),
	.HY(HY),
	.LongTime_i(LongTime_i),
	.ShortTime_i(ShortTime_i),
	.clk(clk)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// LongTime_i[ 5 ]
initial
begin
	LongTime_i[5] = 1'b0;
end 
// LongTime_i[ 4 ]
initial
begin
	LongTime_i[4] = 1'b0;
end 
// LongTime_i[ 3 ]
initial
begin
	LongTime_i[3] = 1'b0;
end 
// LongTime_i[ 2 ]
initial
begin
	LongTime_i[2] = 1'b1;
end 
// LongTime_i[ 1 ]
initial
begin
	LongTime_i[1] = 1'b0;
end 
// LongTime_i[ 0 ]
initial
begin
	LongTime_i[0] = 1'b1;
end 
// ShortTime_i[ 5 ]
initial
begin
	ShortTime_i[5] = 1'b0;
end 
// ShortTime_i[ 4 ]
initial
begin
	ShortTime_i[4] = 1'b0;
end 
// ShortTime_i[ 3 ]
initial
begin
	ShortTime_i[3] = 1'b0;
end 
// ShortTime_i[ 2 ]
initial
begin
	ShortTime_i[2] = 1'b0;
end 
// ShortTime_i[ 1 ]
initial
begin
	ShortTime_i[1] = 1'b1;
end 
// ShortTime_i[ 0 ]
initial
begin
	ShortTime_i[0] = 1'b1;
end 

TrafficLightController_vlg_sample_tst tb_sample (
	.LongTime_i(LongTime_i),
	.ShortTime_i(ShortTime_i),
	.clk(clk),
	.sampler_tx(sampler)
);

TrafficLightController_vlg_check_tst tb_out(
	.FG(FG),
	.FR(FR),
	.FY(FY),
	.HG(HG),
	.HR(HR),
	.HY(HY),
	.sampler_rx(sampler)
);
endmodule

